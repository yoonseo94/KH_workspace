package com.kh.common;

import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class DispatcherServlet
 */
@WebServlet("*.do")
public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	// key = url-pattern, value = controller객체(AbstracController자식타입) 
	private Map<String, AbstractController> urlCommandMap = new HashMap<>();
	
       
    /**
     * @throws ClassNotFoundException 
     * @throws SecurityException 
     * @throws NoSuchMethodException 
     * @throws InvocationTargetException 
     * @throws IllegalArgumentException 
     * @throws IllegalAccessException 
     * @throws InstantiationException 
     * @see HttpServlet#HttpServlet()
     */
    public DispatcherServlet() 
    		throws ClassNotFoundException, 
    			InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
        // 1. urlCommand.properties load -> prop
    	Properties prop = new Properties();
    	String filename = DispatcherServlet.class.getResource("/urlCommand.properties").getPath();
    	try {
			prop.load(new FileReader(filename));
		} catch (IOException e) {
			e.printStackTrace();
		}
    	
    	// 2. urlCommandMap 요소 추가 (url - className)
    	Set<String> urls = prop.stringPropertyNames();
    	for(String url : urls) {
    		String className = prop.getProperty(url);
    		// reflection api를 사용할 객체생성
    		Class<?> clz = Class.forName(className);
    		Class<?> param = null;
    		AbstractController controller = (AbstractController) clz.getDeclaredConstructor(param).newInstance(null);
    		urlCommandMap.put(url, controller);
    	}
    	System.out.println("urlCommandMap = " + urlCommandMap);
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		// 1. controller 연결
		String url = request.getRequestURI().replace(request.getContextPath(), ""); // /mybatis/student/studentEnroll.do
		AbstractController controller = urlCommandMap.get(url);
		if(controller == null) {
			response.setStatus(404); // NotFound처리
			return;
		}
		String method = request.getMethod();
		String viewName = null;
		switch (method) {
		case "GET": viewName = controller.doGet(request, response); break;
		case "POST": viewName = controller.doPost(request, response); break;
		}
		
		// 2. view단 처리 (forward/redirect/아무처리안함)
		if(viewName != null) {
			// redirect
			if(viewName.startsWith("redirect:")) {
				String location = request.getContextPath() + viewName.replace("redirect:", "");
				response.sendRedirect(location);
			}
			// forward
			else {
				
			}
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
