/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-12 03:14:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class basic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	// jsp는 동적으로 컴파일되므로, tomcat 재시작할 필요가 없다.
	
	// scriptlet - 자바영역
	int sum = 0;
	for(int i = 1; i <= 100; i++)
		sum += i;
	System.out.println("sum@server-side = " + sum);
	
	int n = 100;
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jsp기본</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jsp기본</h1>\r\n");
      out.write("	\r\n");
      out.write("	<h2>server | client</h2>\r\n");
      out.write("	<p id=\"server-side-sum\">");
      out.print( sum );
      out.write("</p>\r\n");
      out.write("	<p id=\"client-side-sum\"></p>\r\n");
      out.write("	<br />\r\n");
      out.write("	<p id=\"server-side-time\">");
      out.print( System.currentTimeMillis() );
      out.write("</p>\r\n");
      out.write("	<p id=\"client-side-time\"></p>\r\n");
      out.write("	<br />\r\n");
      out.write("	<p id=\"server-to-client\"></p>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	const clientSideSum = document.querySelector(\"#client-side-sum\");\r\n");
      out.write("	let sum = 0;\r\n");
      out.write("	for(let i = 1; i <= 100; i++)\r\n");
      out.write("		sum += i;\r\n");
      out.write("	clientSideSum.innerHTML = sum;\r\n");
      out.write("	console.log(\"sum@client-side = \", sum);\r\n");
      out.write("	\r\n");
      out.write("	// 클라이언트 사이드 시각 출력\r\n");
      out.write("	document.querySelector(\"#client-side-time\").innerHTML = Date.now();\r\n");
      out.write("	\r\n");
      out.write("	// 서버단 처리값을 자바스크립트에서 활용하기\r\n");
      out.write("	const k = 100 + ");
      out.print( n );
      out.write(";\r\n");
      out.write("	document.querySelector(\"#server-to-client\").innerHTML = k;\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>주석</h2>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<!-- html주석 : 클라이언트에 전달이 된다. -->\r\n");
      out.write("	\r\n");
      out.write("	<h2>분기처리</h2>\r\n");

	String type = request.getParameter("type");
	System.out.println("type = " + type);

	if("abc".equals(type)){

      out.write("\r\n");
      out.write("	<p>abcdefghijklmn</p>\r\n");
		
	} else if("가나다".equals(type)){

      out.write("\r\n");
      out.write("	<p>가나다라마바사</p>\r\n");
 		
	} else if("123".equals(type)){

      out.write("\r\n");
      out.write("	<p>1234567</p>\r\n");
		
	} else {

      out.write("\r\n");
      out.write("	<p>타입이 지정되지 않았습니다.</p>\r\n");
		
	}

      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<h2>반복처리</h2>\r\n");

	List<String> fruits = Arrays.asList("사과", "바나나", "아보카도", "키위");

      out.write("	\r\n");
      out.write("	<ul>\r\n");

	for(String fruit : fruits) {

      out.write("\r\n");
      out.write("		<li>");
      out.print( fruit );
      out.write("</li>         \r\n");
			
	}

      out.write("\r\n");
      out.write("	</ul>\r\n");
      out.write("	\r\n");
      out.write("	<h2>@실습문제</h2>\r\n");
 
	if("abc".equals(type) || "가나다".equals(type)){
		String value = request.getParameter("value");
		
		if(value != null){
			String[] values = value.split(",");

      out.write("\r\n");
      out.write("			<ul>\r\n");

			for(String val : values){

      out.write("\r\n");
      out.write("				<li>");
      out.print( val );
      out.write("</li>\r\n");
				
			}

      out.write("\r\n");
      out.write("			</ul>\r\n");
			
		}
		
	}

      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
