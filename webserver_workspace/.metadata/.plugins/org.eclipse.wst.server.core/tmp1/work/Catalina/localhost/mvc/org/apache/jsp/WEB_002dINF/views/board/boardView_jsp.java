/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-30 01:06:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.model.dto.BoardComment;
import board.model.dto.Attachment;
import java.util.List;
import board.model.dto.BoardExt;
import member.model.dto.MemberRole;
import member.model.dto.Member;

public final class boardView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/common/header.jsp", Long.valueOf(1653276038606L));
    _jspx_dependants.put("/WEB-INF/views/common/footer.jsp", Long.valueOf(1652334477701L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.dto.Member");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.model.dto.BoardComment");
    _jspx_imports_classes.add("board.model.dto.Attachment");
    _jspx_imports_classes.add("board.model.dto.BoardExt");
    _jspx_imports_classes.add("member.model.dto.MemberRole");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Member loginMember = (Member) session.getAttribute("loginMember");
	// System.out.println("loginMember@header.jsp = " + loginMember);
	
	String msg = (String) session.getAttribute("msg");
	if(msg != null)
		session.removeAttribute("msg");
	
	String saveId = null; // 아이디저장을 체크한 경우, memberId값이 담길 변수
	Cookie[] cookies = request.getCookies();
	if(cookies != null){
		for(Cookie cookie : cookies){
			// System.out.println("Cookie{" + cookie.getName() + "=" + cookie.getValue() + "}");
			if("saveId".equals(cookie.getName())){
				saveId = cookie.getValue();
			}
		}
	}
	else {
		// System.out.println("> 이번 요청에 전달된 cookie가 없습니다.");
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Hello MVC</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/style.css\" />\r\n");
      out.write("<script>\r\n");
      out.write("window.onload = () => {\r\n");
 if(msg != null){ 
      out.write("\r\n");
      out.write("	alert(\"");
      out.print( msg );
      out.write("\");\r\n");
 } 
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
 if(loginMember == null) { 
      out.write("\r\n");
      out.write("	document.loginFrm.onsubmit = (e) => {\r\n");
      out.write("		const memberIdVal = memberId.value;\r\n");
      out.write("		const passwordVal = password.value;\r\n");
      out.write("		\r\n");
      out.write("		if(!/^.{4,}$/.test(memberIdVal)){\r\n");
      out.write("			alert(\"유효한 아이디를 입력해주세요.\");\r\n");
      out.write("			memberId.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if(!/^.{4,}$/.test(passwordVal)){\r\n");
      out.write("			alert(\"유효한 비밀번호를 입력해주세요.\");\r\n");
      out.write("			password.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("	};	\r\n");
 } 
      out.write("\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"container\">\r\n");
      out.write("		<header>\r\n");
      out.write("			<h1>Hello MVC</h1>\r\n");
      out.write("			<div class=\"login-container\">\r\n");
      out.write("			");
 if(loginMember == null){ 
      out.write("\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				<!-- 로그인폼 시작 -->\r\n");
      out.write("				<form id=\"loginFrm\" name=\"loginFrm\" method=\"POST\" action=\"");
      out.print( request.getContextPath() );
      out.write("/member/login\">\r\n");
      out.write("					<table>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><input type=\"text\" name=\"memberId\" id=\"memberId\" placeholder=\"아이디\" tabindex=\"1\" value=\"");
      out.print( saveId != null ? saveId : "" );
      out.write("\"></td>\r\n");
      out.write("							<td><input type=\"submit\" value=\"로그인\" tabindex=\"3\"></td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><input type=\"password\" name=\"password\" id=\"password\" placeholder=\"비밀번호\" tabindex=\"2\"></td>\r\n");
      out.write("							<td></td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td colspan=\"2\">\r\n");
      out.write("								<input type=\"checkbox\" name=\"saveId\" id=\"saveId\" ");
      out.print( saveId != null ? "checked" : "" );
      out.write("/>\r\n");
      out.write("								<label for=\"saveId\">아이디저장</label>&nbsp;&nbsp;\r\n");
      out.write("								<input type=\"button\" value=\"회원가입\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/member/memberEnroll';\">\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</table>\r\n");
      out.write("				</form>\r\n");
      out.write("				<!-- 로그인폼 끝-->\r\n");
      out.write("			");
 } else { 
      out.write("\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				<table id=\"login\">\r\n");
      out.write("					<tbody>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>");
      out.print( loginMember.getMemberName() );
      out.write("님, 안녕하세요.</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>\r\n");
      out.write("								<input type=\"button\" value=\"내정보보기\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/member/memberView';\"/>\r\n");
      out.write("								<input type=\"button\" value=\"로그아웃\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/member/logout';\"/>							\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</tbody>\r\n");
      out.write("				</table>\r\n");
      out.write("			");
 } 
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- 메인메뉴 시작 -->\r\n");
      out.write("			<nav>\r\n");
      out.write("				<ul class=\"main-nav\">\r\n");
      out.write("					<li class=\"home\"><a href=\"");
      out.print( request.getContextPath() );
      out.write("\">Home</a></li>\r\n");
      out.write("					<li class=\"notice\"><a href=\"#\">공지사항</a></li>\r\n");
      out.write("					<li class=\"board\"><a href=\"");
      out.print( request.getContextPath() );
      out.write("/board/boardList\">게시판</a></li>\r\n");
      out.write("					");
 if(loginMember != null && loginMember.getMemberRole() == MemberRole.A) { 
      out.write("\r\n");
      out.write("						<li class=\"admin\"><a href=\"");
      out.print( request.getContextPath() );
      out.write("/admin/memberList\">회원관리</a></li>\r\n");
      out.write("					");
 } 
      out.write("\r\n");
      out.write("				</ul>\r\n");
      out.write("			</nav>\r\n");
      out.write("			<!-- 메인메뉴 끝-->\r\n");
      out.write("					\r\n");
      out.write("		</header>\r\n");
      out.write("			\r\n");
      out.write("		<section id=\"content\">");
      out.write('\r');
      out.write('\n');

	BoardExt board = (BoardExt) request.getAttribute("board");
	
	List<BoardComment> comments = board.getBoardComments();
	
	boolean canEdit = loginMember != null 
			&& (loginMember.getMemberId().equals(board.getMemberId()) 
					|| loginMember.getMemberRole() == MemberRole.A);
	

      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/board.css\" />\r\n");
      out.write("<section id=\"board-container\">\r\n");
      out.write("	<h2>게시판</h2>\r\n");
      out.write("	<table id=\"tbl-board-view\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>글번호</th>\r\n");
      out.write("			<td>");
      out.print( board.getNo() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>제 목</th>\r\n");
      out.write("			<td>");
      out.print( board.getTitle() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>작성자</th>\r\n");
      out.write("			<td>");
      out.print( board.getMemberId() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>조회수</th>\r\n");
      out.write("			<td>");
      out.print( board.getReadCount() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
 
			List<Attachment> attachments = board.getAttachments();
			if(attachments != null && !attachments.isEmpty()){
				for(Attachment attach : attachments){
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>첨부파일</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				<img alt=\"첨부파일\" src=\"");
      out.print(request.getContextPath() );
      out.write("/images/file.png\" width=16px>\r\n");
      out.write("				<a href=\"");
      out.print( request.getContextPath() );
      out.write("/board/fileDownload?no=");
      out.print( attach.getNo() );
      out.write('"');
      out.write('>');
      out.print( attach.getOriginalFilename() );
      out.write("</a>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

				}
			}
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>내 용</th>\r\n");
      out.write("			<td>");
      out.print( board.getContent() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
 if(canEdit){ 
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			<th colspan=\"2\">\r\n");
      out.write("				<input type=\"button\" value=\"수정하기\" onclick=\"updateBoard()\">\r\n");
      out.write("				<input type=\"button\" value=\"삭제하기\" onclick=\"deleteBoard()\">\r\n");
      out.write("			</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<hr style=\"margin-top:30px;\" />	\r\n");
      out.write("    \r\n");
      out.write("	<div class=\"comment-container\">\r\n");
      out.write("        <div class=\"comment-editor\">\r\n");
      out.write("            <form\r\n");
      out.write("				action=\"");
      out.print(request.getContextPath());
      out.write("/board/boardCommentEnroll\" method=\"post\" name=\"boardCommentFrm\">\r\n");
      out.write("                <input type=\"hidden\" name=\"boardNo\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("                <input type=\"hidden\" name=\"memberId\" value=\"");
      out.print( loginMember != null ? loginMember.getMemberId() : "" );
      out.write("\" />\r\n");
      out.write("                <input type=\"hidden\" name=\"commentLevel\" value=\"1\" />\r\n");
      out.write("                <input type=\"hidden\" name=\"commentRef\" value=\"0\" />    \r\n");
      out.write("				<textarea name=\"content\" cols=\"60\" rows=\"3\"></textarea>\r\n");
      out.write("                <button type=\"submit\" id=\"btn-comment-enroll1\">등록</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("		<!--table#tbl-comment-->\r\n");
      out.write("		");
 if (comments != null && !comments.isEmpty()) {
      out.write("\r\n");
      out.write("		<table id=\"tbl-comment\">\r\n");
      out.write("			<tbody>\r\n");
      out.write("			");
 
				for (BoardComment bc : comments){ 
					
					boolean canDelete = loginMember != null 
							&& (loginMember.getMemberId().equals(bc.getMemberId()) 
									|| loginMember.getMemberRole() == MemberRole.A);
							
					if(bc.getCommentLevel() == 1){
			
      out.write("\r\n");
      out.write("				<tr class=\"level1\">\r\n");
      out.write("					<td>\r\n");
      out.write("						<sub class=\"comment-writer\">");
      out.print( bc.getMemberId() != null ? bc.getMemberId() : "(탈퇴회원)" );
      out.write("</sub>\r\n");
      out.write("						<sub class=\"comment-date\">");
      out.print( bc.getRegDate() );
      out.write("</sub>\r\n");
      out.write("						<br />\r\n");
      out.write("						");
      out.print( bc.getContent() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<button class=\"btn-reply\" value=\"");
      out.print( bc.getNo() );
      out.write("\">답글</button>\r\n");
      out.write("						");
 if(canDelete){ 
      out.write("\r\n");
      out.write("							<button class=\"btn-delete\" value=\"");
      out.print( bc.getNo() );
      out.write("\">삭제</button>\r\n");
      out.write("						");
 } 
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			");
 		} else { 
      out.write("\r\n");
      out.write("				<tr class=\"level2\">\r\n");
      out.write("					<td>\r\n");
      out.write("						<sub class=\"comment-writer\">");
      out.print( bc.getMemberId() != null ? bc.getMemberId() : "(탈퇴회원)" );
      out.write("</sub>\r\n");
      out.write("						<sub class=\"comment-date\">");
      out.print( bc.getRegDate() );
      out.write("</sub>\r\n");
      out.write("						<br />\r\n");
      out.write("						");
      out.print( bc.getContent() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
 if(canDelete){ 
      out.write("\r\n");
      out.write("							<button class=\"btn-delete\" value=\"");
      out.print( bc.getNo() );
      out.write("\">삭제</button>\r\n");
      out.write("						");
 } 
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			");
 
					}	
				} 
			
      out.write("\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/boardCommentDelete\" name=\"boardCommentDelFrm\" method=\"POST\">\r\n");
      out.write("	<input type=\"hidden\" name=\"no\" /> <!-- 댓글 번호 -->\r\n");
      out.write("	<input type=\"hidden\" name=\"boardNo\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("/**\r\n");
      out.write(" * .btn-reply click eventhandler binding \r\n");
      out.write(" */\r\n");
      out.write("document.querySelectorAll(\".btn-delete\").forEach((button) => {\r\n");
      out.write("	button.onclick = (e) => {\r\n");
      out.write("		if(!confirm(\"정말 삭제하시겠습니까?\")) return;\r\n");
      out.write("		document.boardCommentDelFrm.no.value = e.target.value;\r\n");
      out.write("		document.boardCommentDelFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// tbody > tr > td > .btn-reply\r\n");
      out.write("document.querySelectorAll(\".btn-reply\").forEach((button) => {\r\n");
      out.write("	button.onclick = (e) => {\r\n");
      out.write("		if(");
      out.print( loginMember == null );
      out.write("){\r\n");
      out.write("			loginAlert();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("					\r\n");
      out.write("		const {value : commentRef} = e.target;\r\n");
      out.write("		console.log(commentRef);\r\n");
      out.write("		\r\n");
      out.write("		// tr > td > form \r\n");
      out.write("		const tr = document.createElement(\"tr\");\r\n");
      out.write("		const td = document.createElement(\"td\");\r\n");
      out.write("		td.colSpan = \"2\";\r\n");
      out.write("		td.style.textAlign = \"left\";\r\n");
      out.write("		\r\n");
      out.write("		const frm = document.createElement(\"form\");\r\n");
      out.write("		frm.name = \"boardCommentFrm\";\r\n");
      out.write("		frm.action = \"");
      out.print(request.getContextPath());
      out.write("/board/boardCommentEnroll\";\r\n");
      out.write("		frm.method = \"POST\";\r\n");
      out.write("		frm.onsubmit = commentSubmitHandler; // 동적생성한 요소는 핸들러바인딩도 새로 해야한다.\r\n");
      out.write("		\r\n");
      out.write("		const inputBoardNo = document.createElement(\"input\");\r\n");
      out.write("		inputBoardNo.type = \"hidden\";\r\n");
      out.write("		inputBoardNo.name = \"boardNo\";		\r\n");
      out.write("		inputBoardNo.value = \"");
      out.print( board.getNo() );
      out.write("\"\r\n");
      out.write("		const inputMemberId = document.createElement(\"input\");\r\n");
      out.write("		inputMemberId.type = \"hidden\";\r\n");
      out.write("		inputMemberId.name = \"memberId\";\r\n");
      out.write("		inputMemberId.value = \"");
      out.print( loginMember != null ? loginMember.getMemberId() : "" );
      out.write("\";\r\n");
      out.write("		const inputCommentLevel = document.createElement(\"input\");\r\n");
      out.write("		inputCommentLevel.type = \"hidden\";\r\n");
      out.write("		inputCommentLevel.name = \"commentLevel\";\r\n");
      out.write("		inputCommentLevel.value = \"2\";\r\n");
      out.write("		const inputCommentRef = document.createElement(\"input\");\r\n");
      out.write("		inputCommentRef.type = \"hidden\";\r\n");
      out.write("		inputCommentRef.name = \"commentRef\";\r\n");
      out.write("		inputCommentRef.value = commentRef;\r\n");
      out.write("			\r\n");
      out.write("		const textarea = document.createElement(\"textarea\");\r\n");
      out.write("		textarea.name = \"content\";\r\n");
      out.write("		textarea.cols = \"60\";\r\n");
      out.write("		textarea.rows = \"1\";\r\n");
      out.write("		\r\n");
      out.write("		const button = document.createElement(\"button\");\r\n");
      out.write("		button.className = \"btn-comment-enroll2\";\r\n");
      out.write("		button.innerText = \"등록\"\r\n");
      out.write("		\r\n");
      out.write("		frm.append(inputBoardNo);\r\n");
      out.write("		frm.append(inputMemberId);\r\n");
      out.write("		frm.append(inputCommentLevel);\r\n");
      out.write("		frm.append(inputCommentRef);\r\n");
      out.write("		frm.append(textarea);\r\n");
      out.write("		frm.append(button);\r\n");
      out.write("		td.append(frm);\r\n");
      out.write("		tr.append(td);\r\n");
      out.write("		\r\n");
      out.write("		// console.log(tr);\r\n");
      out.write("		// console.dir(td);\r\n");
      out.write("		\r\n");
      out.write("		// 1.부모요소 tbody\r\n");
      out.write("		const parent = e.target.parentElement.parentElement.parentElement;\r\n");
      out.write("		// console.log(parent); // td - tr - tbody\r\n");
      out.write("		// 2.기준요소 다음tr태그 \r\n");
      out.write("		const ref = e.target.parentElement.parentElement.nextElementSibling;\r\n");
      out.write("		// console.log(ref);\r\n");
      out.write("		\r\n");
      out.write("		// 생성된 tr 추가\r\n");
      out.write("		// parent.insertBefore(tr, ref);\r\n");
      out.write("		\r\n");
      out.write("		// target.insertAdjacentElement(position, newNode)\r\n");
      out.write("		// 1. beforebegin target의 이전 형제요소로 추가\r\n");
      out.write("		// 2. afterbegin target의 시작태그 다음에 자식요소로 추가\r\n");
      out.write("		// 3. beforeend target의 종료태그 직전에 자식요소로 추가\r\n");
      out.write("		// 4. afterend target의 다음 형제요소로 추가\r\n");
      out.write("		\r\n");
      out.write("		const target = e.target.parentElement.parentElement; // button.btn-reply의 부모tr\r\n");
      out.write("		console.log(target);\r\n");
      out.write("		target.insertAdjacentElement('afterend', tr);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 이벤트핸들링은 1회만 허용.\r\n");
      out.write("		e.target.onclick = null;\r\n");
      out.write("		\r\n");
      out.write("	};\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("document.querySelector(\"textarea[name=content]\").onfocus = (e) => {\r\n");
      out.write("	if(");
      out.print( loginMember == null );
      out.write(")\r\n");
      out.write("		loginAlert();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("const commentSubmitHandler = (e) => {\r\n");
      out.write("	if(");
      out.print( loginMember == null );
      out.write("){\r\n");
      out.write("		loginAlert();\r\n");
      out.write("		return false; 		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	const contentVal = e.target.content.value.trim();\r\n");
      out.write("	if(!/^(.|\\n)+$/.test(contentVal)){\r\n");
      out.write("		alert(\"댓글 내용을 작성해주세요.\");\r\n");
      out.write("		e.target.content.focus();\r\n");
      out.write("		return false;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("document.boardCommentFrm.onsubmit = commentSubmitHandler;\r\n");
      out.write("\r\n");
      out.write("const loginAlert = () => {\r\n");
      out.write("	alert(\"로그인후 이용할 수 있습니다.\");\r\n");
      out.write("	document.querySelector(\"#memberId\").focus();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
 if(canEdit){ 
      out.write("\r\n");
      out.write("<form action=\"");
      out.print( request.getContextPath() );
      out.write("/board/boardDelete\" name=\"boardDeleteFrm\" method=\"POST\">\r\n");
      out.write("	<input type=\"hidden\" name=\"no\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("/**\r\n");
      out.write(" * POST /board/boardDelete\r\n");
      out.write(" * - no전송\r\n");
      out.write(" * - 저장된 파일 삭제 : java.io.File \r\n");
      out.write(" */\r\n");
      out.write("const deleteBoard = () => {\r\n");
      out.write("	if(confirm(\"정말 이 게시글을 삭제하시겠습니까?\"))\r\n");
      out.write("		document.boardDeleteFrm.submit();\r\n");
      out.write("};	\r\n");
      out.write("\r\n");
      out.write("const updateBoard = () => {\r\n");
      out.write("	location.href = \"");
      out.print( request.getContextPath() );
      out.write("/board/boardUpdate?no=");
      out.print( board.getNo() );
      out.write("\";\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
 } 
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("		</section>\r\n");
      out.write("\r\n");
      out.write("		<footer>\r\n");
      out.write("			<p>&lt;Copyright 1998-2021 <strong>KH정보교육원</strong>. All rights reserved.&gt;</p>\r\n");
      out.write("		</footer>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
