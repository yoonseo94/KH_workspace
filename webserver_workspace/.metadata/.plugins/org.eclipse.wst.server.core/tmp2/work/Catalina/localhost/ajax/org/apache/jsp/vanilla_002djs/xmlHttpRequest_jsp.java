/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-30 03:49:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.vanilla_002djs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class xmlHttpRequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>XMLHttpRequest</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>XMLHttpRequest</h1>\r\n");
      out.write("	<h2>GET</h2>\r\n");
      out.write("	<form name=\"searchFrm\">\r\n");
      out.write("		<input type=\"search\" name=\"q\" id=\"q\" />\r\n");
      out.write("		<button>검색</button>\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"result\"></div>\r\n");
      out.write("	<script>\r\n");
      out.write("	let xhr; // XMLHttpRequest객체를 대입할 변수 \r\n");
      out.write("	document.searchFrm.addEventListener('submit', (e) => {\r\n");
      out.write("		e.preventDefault(); // 제출금지. 폼제출 동기요청\r\n");
      out.write("		\r\n");
      out.write("		// 1. XMLHttpRequest객체 생성\r\n");
      out.write("		xhr = new XMLHttpRequest();\r\n");
      out.write("		console.log(xhr);\r\n");
      out.write("		\r\n");
      out.write("		// 2. xhr객체 연결상태 변화에 따른 핸들러함수 바인딩\r\n");
      out.write("		xhr.onreadystatechange = readyStateChangeHandler;\r\n");
      out.write("		\r\n");
      out.write("		// 3. open 연결\r\n");
      out.write("		// open(전송방식, url?querystring)\r\n");
      out.write("		xhr.open(\"GET\", \"");
      out.print( request.getContextPath() );
      out.write("/vanilla-js/search?q=\" + e.target.q.value);\r\n");
      out.write("		\r\n");
      out.write("		// 4. sned 요청전송\r\n");
      out.write("		xhr.send();\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	const readyStateChangeHandler = (e) => {\r\n");
      out.write("		switch(xhr.readyState) {\r\n");
      out.write("		case 0 : console.log('0 : uninitialized'); break; // xhr객체 생성\r\n");
      out.write("		case 1 : console.log('1 : loading'); break; // open 연결중\r\n");
      out.write("		case 2 : console.log('2 : loaded'); break; // send 요청\r\n");
      out.write("		case 3 : console.log('3 : interactive'); break; // 응답메세지 수신시작\r\n");
      out.write("		case 4 : console.log('4 : completed'); break; // 응답메세지 수신완료\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		if(xhr.readyState === 4){\r\n");
      out.write("			if(xhr.status === 200){\r\n");
      out.write("				// 정상처리\r\n");
      out.write("				console.log(xhr.responseText);\r\n");
      out.write("				result.innerHTML = xhr.responseText;\r\n");
      out.write("			}\r\n");
      out.write("			else {\r\n");
      out.write("				// 오류\r\n");
      out.write("				alert(\"오류가 발생했습니다.\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	};\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>POST</h2>\r\n");
      out.write("	<form name=\"signupFrm\">\r\n");
      out.write("		<input type=\"text\" name=\"username\" placeholder=\"username\"/>\r\n");
      out.write("		<input type=\"email\" name=\"email\" placeholder=\"email\"/>\r\n");
      out.write("		<br />\r\n");
      out.write("		<button>등록</button>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script>\r\n");
      out.write("	document.signupFrm.addEventListener('submit', (e) => {\r\n");
      out.write("		e.preventDefault(); // 폼제출방지\r\n");
      out.write("		\r\n");
      out.write("		// 1. XMLHttpRequest객체 생성\r\n");
      out.write("		xhr = new XMLHttpRequest(); \r\n");
      out.write("		\r\n");
      out.write("		// 2. readystatechange 핸들러 바인딩\r\n");
      out.write("		xhr.onreadystatechange = signupHandler;\r\n");
      out.write("		\r\n");
      out.write("		// 3. open 연결생성 - content-type지정(필수)\r\n");
      out.write("		xhr.open(\"POST\", \"");
      out.print( request.getContextPath() );
      out.write("/vanilla-js/signup\");\r\n");
      out.write("		xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n");
      out.write("		\r\n");
      out.write("		// 4. send 요청 - 사용자입력값 전달 (message body에 작성)\r\n");
      out.write("		const usernameVal = e.target.username.value;\r\n");
      out.write("		const emailVal = e.target.email.value;\r\n");
      out.write("		const param = `username=${usernameVal}&email=${emailVal}`;\r\n");
      out.write("		xhr.send(param); // 데이터 직렬화처리후 전송\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	const signupHandler = (e) => {\r\n");
      out.write("		if(xhr.readyState == 4 && xhr.status === 200) {\r\n");
      out.write("			// 정상처리\r\n");
      out.write("			alert(xhr.responseText);\r\n");
      out.write("			console.log(xhr);	\r\n");
      out.write("		}\r\n");
      out.write("		if(xhr.readyState == 4 && xhr.status !== 200) {\r\n");
      out.write("			// 오류처리\r\n");
      out.write("			console.log(xhr);\r\n");
      out.write("			result.innerHTML = xhr.responseText;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	};\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
