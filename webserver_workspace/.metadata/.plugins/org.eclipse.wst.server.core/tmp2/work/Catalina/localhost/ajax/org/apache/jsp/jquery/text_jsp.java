/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-31 01:14:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class text_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jquery - text</title>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("table {border : 1px solid #000; border-collapse: collapse; margin: 10px 0;}\r\n");
      out.write("th, td {border : 1px solid #000; text-align: center; padding: 3px; }\r\n");
      out.write("table img {width: 100px;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>text</h1>\r\n");
      out.write("	<button id=\"btn1\">text</button>\r\n");
      out.write("	<script>\r\n");
      out.write("	btn1.addEventListener('click', (e) => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/jquery/text\",\r\n");
      out.write("			method : \"GET\", // 전송방식 GET(기본값) | POST | PUT | PATCH ...\r\n");
      out.write("			data : {\r\n");
      out.write("				q : \"abcde\",\r\n");
      out.write("				mode : 123,\r\n");
      out.write("				isFinal : true\r\n");
      out.write("			}, // 사용자입력값 직렬화처리후 GET방식이면 url에 추가, POST방식이면 body부분에 작성\r\n");
      out.write("			dataType : \"text\", // text | html | script | json | xml 응답데이터 타입지정\r\n");
      out.write("			beforeSend(){\r\n");
      out.write("				// 요청전 호출 메소드\r\n");
      out.write("				console.log(\"beforeSend\");\r\n");
      out.write("			},\r\n");
      out.write("			success(responseText){\r\n");
      out.write("				// xhr.responseText 후처리후 success 메소드에 전달!\r\n");
      out.write("				// readyState = 4 && status = 200\r\n");
      out.write("				console.log(\"success : \", responseText); \r\n");
      out.write("			},\r\n");
      out.write("			error(jqxhr, textStatus, err){\r\n");
      out.write("				// readyState = 4 && status != 200\r\n");
      out.write("				console.log(\"error: \", jqxhr, textStatus, err);\r\n");
      out.write("			},\r\n");
      out.write("			complete(){\r\n");
      out.write("				// 응답후(성공, 실패) 반드시 실행하는 메소드\r\n");
      out.write("				console.log(\"complete\");\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<button id=\"btn2\">csv</button>\r\n");
      out.write("	<table id=\"tbl-celeb\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>No</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>타입</th><!-- select태그 하위에 해당타입이 selected 처리 -->\r\n");
      out.write("				<th>프로필</th><!-- img태그처리 -->\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody></tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<script>\r\n");
      out.write("	/**\r\n");
      out.write("	 * csv comma separated value\r\n");
      out.write("	 * \r\n");
      out.write("	 */\r\n");
      out.write("	btn2.addEventListener('click', (e) => {\r\n");
      out.write("		/*\r\n");
      out.write("			1,daft punk,SINGER,daftpunk.jpg\r\n");
      out.write("			2,hwang,COMEDIAN,hwang.jpg\r\n");
      out.write("			3,쥴리아 로버츠,ACTOR,juliaRoberts.jpg\r\n");
      out.write("			4,맷 데이먼,ACTOR,mattDamon.jpg\r\n");
      out.write("			5,유재석,ENTERTAINER,유재석.jpg\r\n");
      out.write("		*/\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/jquery/csv\",\r\n");
      out.write("			method : \"GET\",\r\n");
      out.write("			dataType : \"text\", \r\n");
      out.write("			success(response){\r\n");
      out.write("				console.log(response);\r\n");
      out.write("				const celebStrs = response.split(\"\\r\\n\");\r\n");
      out.write("				const tbody = document.querySelector(\"#tbl-celeb tbody\");\r\n");
      out.write("				tbody.innerHTML = \"\"; // tbody초기화\r\n");
      out.write("				console.log(celebStrs);\r\n");
      out.write("				celebStrs.forEach((celebStr) => {\r\n");
      out.write("					if(celebStr === '') return; // 마지막 '' \r\n");
      out.write("					const celeb = celebStr.split(\",\");\r\n");
      out.write("					// console.log(celeb);\r\n");
      out.write("					const tr = document.createElement(\"tr\");\r\n");
      out.write("					\r\n");
      out.write("					const tdNo = document.createElement(\"td\");\r\n");
      out.write("					tdNo.append(celeb[0]);\r\n");
      out.write("					\r\n");
      out.write("					const tdName = document.createElement(\"td\");\r\n");
      out.write("					tdName.append(celeb[1]);\r\n");
      out.write("					\r\n");
      out.write("					const tdType = document.createElement(\"td\");\r\n");
      out.write("					const select = document.createElement(\"select\");\r\n");
      out.write("					// ACTOR, SINGER, MODEL, COMEDIAN, ENTERTAINER\r\n");
      out.write("					const option1 = document.createElement(\"option\")\r\n");
      out.write("					option1.value = \"ACTOR\";\r\n");
      out.write("					option1.innerHTML = \"ACTOR\";\r\n");
      out.write("					const option2 = document.createElement(\"option\")\r\n");
      out.write("					option2.value = \"SINGER\";\r\n");
      out.write("					option2.innerHTML = \"SINGER\";\r\n");
      out.write("					const option3 = document.createElement(\"option\")\r\n");
      out.write("					option3.value = \"MODEL\";\r\n");
      out.write("					option3.innerHTML = \"MODEL\";\r\n");
      out.write("					const option4 = document.createElement(\"option\")\r\n");
      out.write("					option4.value = \"COMEDIAN\";\r\n");
      out.write("					option4.innerHTML = \"COMEDIAN\";\r\n");
      out.write("					const option5 = document.createElement(\"option\")\r\n");
      out.write("					option5.value = \"ENTERTAINER\";\r\n");
      out.write("					option5.innerHTML = \"ENTERTAINER\";\r\n");
      out.write("					select.append(option1, option2, option3, option4, option5);\r\n");
      out.write("					select.value = celeb[2]; \r\n");
      out.write("					console.dir(select);\r\n");
      out.write("					// select.disabled = \"disabled\";\r\n");
      out.write("					// 값변경 금지\r\n");
      out.write("					select.dataset.value = celeb[2];\r\n");
      out.write("					select.onchange = function(){ \r\n");
      out.write("						this.value = this.dataset.value;\r\n");
      out.write("					};\r\n");
      out.write("					tdType.append(select);\r\n");
      out.write("					\r\n");
      out.write("					const tdProfile = document.createElement(\"td\");\r\n");
      out.write("					const img = document.createElement(\"img\");\r\n");
      out.write("					img.src = `");
      out.print( request.getContextPath() );
      out.write("/images/${celeb[3]}`\r\n");
      out.write("					tdProfile.append(img);\r\n");
      out.write("					\r\n");
      out.write("					tr.append(tdNo, tdName, tdType, tdProfile);\r\n");
      out.write("					\r\n");
      out.write("					tbody.append(tr);\r\n");
      out.write("				});\r\n");
      out.write("			},\r\n");
      out.write("			error(xhr, textStatus, err){\r\n");
      out.write("				console.log(\"error : \", xhr, textStatus, err);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
