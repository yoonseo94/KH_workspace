/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-02 00:22:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class xml_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jquery - xml</title>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("table {border : 1px solid #000; border-collapse: collapse; margin: 10px 0;}\r\n");
      out.write("th, td {border : 1px solid #000; text-align: center; padding: 3px; }\r\n");
      out.write("table img {width: 100px;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("window.addEventListener('load', () => {\r\n");
      out.write("	const today = new Date();\r\n");
      out.write("	console.log(today);\r\n");
      out.write("	const yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\r\n");
      out.write("	//console.log('yesterday = ', yesterday.toISOString());\r\n");
      out.write("	const f = (d) => {\r\n");
      out.write("		const m = (n) => n < 10 ? \"0\" + n : n;\r\n");
      out.write("		return `${d.getFullYear()}${m(d.getMonth() + 1)}${m(d.getDate())}`\r\n");
      out.write("	};\r\n");
      out.write("	console.log(f(yesterday));\r\n");
      out.write("	getDailyBoxOffice(f(yesterday));\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body >\r\n");
      out.write("	<h1>xml</h1>\r\n");
      out.write("	<button id=\"btn1\">sample</button>\r\n");
      out.write("	<table id=\"tbl-books\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>분류</th>\r\n");
      out.write("				<th>제목</th>\r\n");
      out.write("				<th>저자</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody></tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<script>\r\n");
      out.write("	btn1.addEventListener('click', () => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/jquery/sample.xml\",\r\n");
      out.write("			method : \"GET\",\r\n");
      out.write("			dataType : \"xml\",\r\n");
      out.write("			success(doc){\r\n");
      out.write("				// 응답받은 xml을 jquery가 parsing처리후 DOM으로 전달. \r\n");
      out.write("				console.log(doc);\r\n");
      out.write("				console.dir(doc); // document\r\n");
      out.write("				\r\n");
      out.write("				const root = doc.querySelector(\":root\"); // books태그\r\n");
      out.write("				console.dir(root);\r\n");
      out.write("				\r\n");
      out.write("				// 사용자 속성가져오기\r\n");
      out.write("				console.log(root.myattr); // undefined root.attributes(NamedNodeMap타입)속성에서 관리됨.\r\n");
      out.write("				console.log(root.getAttribute(\"myattr\")); // hello\r\n");
      out.write("				\r\n");
      out.write("				const tbody = document.querySelector(\"#tbl-books tbody\");\r\n");
      out.write("				tbody.innerHTML = \"\";\r\n");
      out.write("				\r\n");
      out.write("				const books = [...root.children]; // Array.from(유사배열)\r\n");
      out.write("				console.log(books);\r\n");
      out.write("				books.forEach((book) => {\r\n");
      out.write("					const [subject , title, author] = book.children;\r\n");
      out.write("					// console.log(subject, title, author);\r\n");
      out.write("					tbody.innerHTML += `<tr>\r\n");
      out.write("						<td>${subject.textContent}</td>\r\n");
      out.write("						<td>${title.textContent}</td>\r\n");
      out.write("						<td>${author.textContent}</td>\r\n");
      out.write("					</tr>`;\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<button id=\"btn2\">celeb</button>\r\n");
      out.write("	<table id=\"tbl-celeb\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>No</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>타입</th><!-- select태그 하위에 해당타입이 selected 처리 -->\r\n");
      out.write("				<th>프로필</th><!-- img태그처리 -->\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody></tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<script>\r\n");
      out.write("	btn2.addEventListener('click', () => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/jquery/xml\",\r\n");
      out.write("			// dataType : \"xml\", // 응답데이터를 보고 자동으로 지정\r\n");
      out.write("			success(doc){\r\n");
      out.write("				console.log(doc);\r\n");
      out.write("				const root = doc.querySelector(\":root\"); // celebs태그\r\n");
      out.write("				console.log(`총 ${root.getAttribute(\"len\")}개의 데이터가 조회되었습니다.`);\r\n");
      out.write("				\r\n");
      out.write("				const celebs = [...root.children]; // 전개 연산자\r\n");
      out.write("				document.querySelector(\"#tbl-celeb tbody\").innerHTML = \r\n");
      out.write("					celebs.reduce((html, celeb) => {\r\n");
      out.write("						const [name, type, profile] = celeb.children; // iterator를 상속(진짜배열, 유사배열)\r\n");
      out.write("						const tr = `<tr>\r\n");
      out.write("							<td>${celeb.getAttribute(\"no\")}</td>\r\n");
      out.write("							<td>${name.textContent}</td>\r\n");
      out.write("							<td>${type.textContent}</td>\r\n");
      out.write("							<td>\r\n");
      out.write("								<img src=\"");
      out.print( request.getContextPath() );
      out.write("/images/${profile.textContent}\"/>\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>`;\r\n");
      out.write("						return html + tr;\r\n");
      out.write("					}, \"\");\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr />\r\n");
      out.write("	<h2>일일 박스오피스 조회</h2>\r\n");
      out.write("	<div><input type=\"date\" name=\"targetDt\" id=\"targetDt\" /></div>\r\n");
      out.write("	<table id=\"tbl-daily-boxoffice\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>순위</th>\r\n");
      out.write("				<th>영화제목</th>\r\n");
      out.write("				<th>누적관객수</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody></tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<script>\r\n");
      out.write("	/**\r\n");
      out.write("	 * @실습문제 - 페이지로딩이 완료되면 어제 날짜로 박스오피스 조회를 자동으로 처리.\r\n");
      out.write("	 * \r\n");
      out.write("	 */\r\n");
      out.write("	targetDt.addEventListener('change', (e) => {\r\n");
      out.write("		const val = e.target.value.replace(/-/g, \"\");\r\n");
      out.write("		console.log(val);\r\n");
      out.write("		\r\n");
      out.write("		getDailyBoxOffice(val);\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	/**\r\n");
      out.write("	 * date는 yyyymmdd 포맷을 가진 문자열이다.\r\n");
      out.write("	 */\r\n");
      out.write("	const getDailyBoxOffice = (date) => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.xml\",\r\n");
      out.write("			data : {\r\n");
      out.write("				key : 'fa2ce7308ff7ef70205103ecc11b5d9c',\r\n");
      out.write("				targetDt : date\r\n");
      out.write("			},\r\n");
      out.write("			success(doc){\r\n");
      out.write("				console.log(doc);\r\n");
      out.write("				\r\n");
      out.write("				// doc -> html\r\n");
      out.write("				const root = doc.querySelector(\":root\"); \r\n");
      out.write("				const dailyBoxOfficeList = root.lastElementChild;\r\n");
      out.write("				const dailyBoxOffices = [...dailyBoxOfficeList.children];\r\n");
      out.write("				\r\n");
      out.write("				document.querySelector(\"#tbl-daily-boxoffice tbody\").innerHTML = \r\n");
      out.write("					dailyBoxOffices.reduce((html, dailyBoxOffice) => {\r\n");
      out.write("						// console.log(dailyBoxOffice.children);\r\n");
      out.write("						const [rnum, rank, rankInten, rankOldAndNew, movieCd, \r\n");
      out.write("							   movieNm, openDt, salesAmt, salesShare, salesInten, \r\n");
      out.write("							   salesChange, salesAcc, audiCnt, audiInten, audiChange, \r\n");
      out.write("							   audiAcc, scrnCnt, showCnt] = dailyBoxOffice.children;\r\n");
      out.write("						return `${html}\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>${rank.textContent}</td>\r\n");
      out.write("							<td>${movieNm.textContent}</td>\r\n");
      out.write("							<td>${audiAcc.textContent}</td>\r\n");
      out.write("						</tr>` \r\n");
      out.write("					}, \"\");\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});	\r\n");
      out.write("	};\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
