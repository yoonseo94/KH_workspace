/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-03 00:15:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class json_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\" />\r\n");
      out.write("	<title>jquery - json</title>\r\n");
      out.write("	<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("	<style>\r\n");
      out.write("	table {\r\n");
      out.write("		border : 1px solid #000;\r\n");
      out.write("		border-collapse : collapse;\r\n");
      out.write("		margin : 10px 0;\r\n");
      out.write("	}\r\n");
      out.write("	tr[data-no] {\r\n");
      out.write("		cursor : pointer;\r\n");
      out.write("	}\r\n");
      out.write("	th, td {\r\n");
      out.write("		border : 1px solid #000;\r\n");
      out.write("		padding : 5px;\r\n");
      out.write("		text-align : center\r\n");
      out.write("	}\r\n");
      out.write("	table img {\r\n");
      out.write("		width: 150px;\r\n");
      out.write("	}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>json</h1>\r\n");
      out.write("	<h2>celeb</h2>\r\n");
      out.write("	<button id=\"btn1\">전체조회</button>\r\n");
      out.write("	<table id=\"tbl-celeb\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>No</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>타입</th>\r\n");
      out.write("				<th>프로필</th>\r\n");
      out.write("				<th>삭제</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody></tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<script>\r\n");
      out.write("	btn1.addEventListener('click', () => {\r\n");
      out.write("		findAll();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	const findAll = () => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/celeb/findAll\",\r\n");
      out.write("			method : \"GET\",\r\n");
      out.write("			dataType : \"json\",\r\n");
      out.write("			success(resp){\r\n");
      out.write("				console.log(resp); // js array\r\n");
      out.write("				\r\n");
      out.write("				const tbody = document.querySelector('#tbl-celeb tbody');\r\n");
      out.write("				tbody.innerHTML = \"\";\r\n");
      out.write("				resp.forEach((celeb, index) => {\r\n");
      out.write("					console.log(index, celeb);\r\n");
      out.write("					const {no, name, type, profile} = celeb;\r\n");
      out.write("					const tr = document.createElement(\"tr\");\r\n");
      out.write("					// tr[data-no]\r\n");
      out.write("					tr.dataset.no = no;\r\n");
      out.write("					tr.onclick = function(){\r\n");
      out.write("						// console.log(this.dataset.no);\r\n");
      out.write("						findOne(this.dataset.no);\r\n");
      out.write("					};\r\n");
      out.write("					const tdNo = document.createElement(\"td\");\r\n");
      out.write("					tdNo.append(no);\r\n");
      out.write("					const tdName = document.createElement(\"td\");\r\n");
      out.write("					tdName.append(name);\r\n");
      out.write("					const tdType = document.createElement(\"td\");\r\n");
      out.write("					tdType.append(type);\r\n");
      out.write("					const tdProfile = document.createElement(\"td\");\r\n");
      out.write("					const img = document.createElement(\"img\");\r\n");
      out.write("					img.src = `");
      out.print( request.getContextPath() );
      out.write("/images/${profile}`;\r\n");
      out.write("					tdProfile.append(img);\r\n");
      out.write("					\r\n");
      out.write("					const tdDel = document.createElement(\"td\");\r\n");
      out.write("					const button = document.createElement(\"button\");\r\n");
      out.write("					button.textContent = \"삭제\"\r\n");
      out.write("					button.onclick = (e) => {\r\n");
      out.write("						e.stopPropagation(); // 이벤트 전파 중지\r\n");
      out.write("						deleteCeleb(no);\r\n");
      out.write("					};\r\n");
      out.write("					tdDel.append(button);\r\n");
      out.write("					\r\n");
      out.write("					tr.append(tdNo, tdName, tdType, tdProfile, tdDel);\r\n");
      out.write("					tbody.append(tr);\r\n");
      out.write("				});\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	const deleteCeleb = (no) => {\r\n");
      out.write("		console.log(no + \"삭제 요청!\");\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/**\r\n");
      out.write("	 * tr클릭시 해당 no의 celeb 한건을 조회해서 celebUpdateFrm에 세팅\r\n");
      out.write("	 */\r\n");
      out.write("	const findOne = (no) => {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/celeb/findOne\",\r\n");
      out.write("			data : {no},\r\n");
      out.write("			success(celeb){\r\n");
      out.write("				console.log(celeb);\r\n");
      out.write("				const {no, name, type, profile} = celeb;\r\n");
      out.write("				const frm = document.celebUpdateFrm;\r\n");
      out.write("				frm.no.value = no;\r\n");
      out.write("				frm.name.value = name;\r\n");
      out.write("				frm.type.value = type;\r\n");
      out.write("				frm.querySelector(\"#celeb-profile\").src = `");
      out.print( request.getContextPath() );
      out.write("/images/${profile}`;\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log \r\n");
      out.write("		});\r\n");
      out.write("	};\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<form name=\"celebUpdateFrm\">\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>Celeb 수정폼</legend>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tbody>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-update-no\">No</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" name=\"no\" id=\"celeb-update-no\" readonly/>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-update-name\">Name</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" name=\"name\" id=\"celeb-update-name\" />\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-update-type\">Type</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<!-- select[name=type]#celeb-update-type -->\r\n");
      out.write("							<select name=\"type\" id=\"celeb-update-type\">\r\n");
      out.write("								<option value=\"ACTOR\">ACTOR</option>\r\n");
      out.write("								<option value=\"SINGER\">SINGER</option>\r\n");
      out.write("								<option value=\"MODEL\">MODEL</option>\r\n");
      out.write("								<option value=\"COMEDIAN\">COMEDIAN</option>\r\n");
      out.write("								<option value=\"ENTERTAINER\">ENTERTAINER</option>\r\n");
      out.write("							</select>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-update-profile\">Profile</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<div>\r\n");
      out.write("								<img src=\"\" alt=\"\" id=\"celeb-profile\"/>\r\n");
      out.write("							</div>\r\n");
      out.write("							<input type=\"file\" name=\"profile\" id=\"celeb-update-profile\" />\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td colspan=\"2\">\r\n");
      out.write("							<button>수정</button>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</tbody>\r\n");
      out.write("			</table>		\r\n");
      out.write("		</fieldset>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script>\r\n");
      out.write("	document.celebUpdateFrm.addEventListener('submit', (e) => {\r\n");
      out.write("		e.preventDefault();\r\n");
      out.write("		const frm = e.target;\r\n");
      out.write("		const frmData = new FormData(frm); // 1. FormData \r\n");
      out.write("			\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/celeb/update\",\r\n");
      out.write("			method : \"POST\",\r\n");
      out.write("			data : frmData,\r\n");
      out.write("			contentType : false, // 2. content type\r\n");
      out.write("			processData : false, // 3. process data : 직렬화 X\r\n");
      out.write("			success(resp) {\r\n");
      out.write("				console.log(resp);\r\n");
      out.write("				const {result, data} = resp;\r\n");
      out.write("				if(result){\r\n");
      out.write("					alert('정보 수정 성공');\r\n");
      out.write("					findAll(); // 목록 조회\r\n");
      out.write("					frm.reset(); // 폼 초기화\r\n");
      out.write("					frm.querySelector(\"#celeb-profile\").src = \"\";				\r\n");
      out.write("				}\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<form name=\"celebEnrollFrm\">\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>Celeb 등록폼</legend>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tbody>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-enroll-no\">No</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" name=\"no\" id=\"celeb-enroll-no\"/>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-enroll-name\">Name</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" name=\"name\" id=\"celeb-enroll-name\" />\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-enroll-type\">Type</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<select name=\"type\" id=\"celeb-enroll-type\">\r\n");
      out.write("								<option value=\"ACTOR\">ACTOR</option>\r\n");
      out.write("								<option value=\"SINGER\">SINGER</option>\r\n");
      out.write("								<option value=\"MODEL\">MODEL</option>\r\n");
      out.write("								<option value=\"COMEDIAN\">COMEDIAN</option>\r\n");
      out.write("								<option value=\"ENTERTAINER\">ENTERTAINER</option>\r\n");
      out.write("							</select>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>\r\n");
      out.write("							<label for=\"celeb-enroll-profile\">Profile</label>\r\n");
      out.write("						</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"file\" name=\"profile\" id=\"celeb-enroll-profile\" />\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td colspan=\"2\">\r\n");
      out.write("							<button>등록</button>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</tbody>\r\n");
      out.write("			</table>		\r\n");
      out.write("		</fieldset>\r\n");
      out.write("	</form>\r\n");
      out.write("	<script>\r\n");
      out.write("	document.celebEnrollFrm.addEventListener('submit', (e) => {\r\n");
      out.write("		e.preventDefault();\r\n");
      out.write("		\r\n");
      out.write("		// 비동기요청 파일업로드 FormData객체 사용\r\n");
      out.write("		const frmData = new FormData(e.target);\r\n");
      out.write("		console.log(frmData);\r\n");
      out.write("		console.log(frmData.values());\r\n");
      out.write("		for(let key of frmData.keys()){\r\n");
      out.write("			console.log(key, frmData.get(key));\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.print( request.getContextPath() );
      out.write("/celeb/enroll\",\r\n");
      out.write("			method : \"POST\",\r\n");
      out.write("			dataType : \"json\",\r\n");
      out.write("			data : frmData,\r\n");
      out.write("			processData : false, // 문자열처리하지 않음.\r\n");
      out.write("			contentType : false, // content type지정 속성. 기본값(application/x-www-form-urlencoded) 처리 안함.\r\n");
      out.write("			success(resp) {\r\n");
      out.write("				console.log(resp);\r\n");
      out.write("				const {result, data} = resp;\r\n");
      out.write("				if(result){\r\n");
      out.write("					alert(\"등록 성공!\");\r\n");
      out.write("					findAll();\r\n");
      out.write("					e.target.reset();\r\n");
      out.write("				}\r\n");
      out.write("			},\r\n");
      out.write("			error : console.log\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
